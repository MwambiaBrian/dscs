import os
import sys
import json
from datetime import datetime
from pathlib import Path

DSCS_DIR = '.dscs'

def init():
    """Initialize a new DSCS repository."""
    if os.path.exists(DSCS_DIR):
        print("DSCS repository already initialized.")
        return
    
    os.makedirs(DSCS_DIR)
    os.makedirs(f"{DSCS_DIR}/objects")
    os.makedirs(f"{DSCS_DIR}/refs/heads")
    
    with open(f"{DSCS_DIR}/HEAD", 'w') as head_file:
        head_file.write("ref: refs/heads/main\n")
    
    with open(f"{DSCS_DIR}/refs/heads/main", 'w') as main_branch:
        main_branch.write("")
    
    with open(f"{DSCS_DIR}/index", 'w') as index_file:
        index_file.write("{}")
    
    print("Initialized empty DSCS repository.")

def add(file_path):
    """Stage a file for commit."""
    if not os.path.exists(DSCS_DIR):
        print("Not a DSCS repository. Run 'dscs init' first.")
        return
    
    index_path = f"{DSCS_DIR}/index"
    with open(index_path, 'r') as index_file:
        index = json.load(index_file)
    
    if not os.path.exists(file_path):
        print(f"File {file_path} does not exist.")
        return
    
    with open(file_path, 'rb') as f:
        content = f.read()
    file_hash = hash_object(content)
    
    object_path = f"{DSCS_DIR}/objects/{file_hash}"
    if not os.path.exists(object_path):
        with open(object_path, 'wb') as obj_file:
            obj_file.write(content)
    
    index[file_path] = file_hash
    
    with open(index_path, 'w') as index_file:
        json.dump(index, index_file)
    
    print(f"Staged {file_path} for commit.")

def hash_object(data):
    """Generate a hash for the given data."""
    import hashlib
    return hashlib.sha1(data).hexdigest()


def main():
    commands = {
        "init": init,
        "add": lambda: add(sys.argv[2]) if len(sys.argv) > 2 else print("Error: No file specified for 'add' command."),
        # Other commands will be added here.
    }
    
    if len(sys.argv) < 2 or sys.argv[1] not in commands:
        print("Usage: dscs <command>")
        return
    
    command = sys.argv[1]
    commands[command]()

if __name__ == "__main__":
    main()
